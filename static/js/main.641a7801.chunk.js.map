{"version":3,"sources":["utils.js","components/FadeIn.js","components/GlslCanvas.js","components/GlslModal.js","components/Thumbnail.js","components/GalleryItem.js","components/gallery/GameOfLife.js","components/gallery/ColorAutomata.js","stats.js","App.js","loader.js","index.js"],"names":["createProgram","gl","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","createShader","type","src","s","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","blankImage","width","height","buffer","Uint8Array","fill","length","createTexture","textureUnit","image","texture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","FadeIn","children","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","GlslCanvas","props","canvasRef","React","createRef","canvas","this","current","code","display","glslCanvas","webglCanvas","load","style","initCanvas","data-fragment","data-vertex","ref","Component","defaultProps","textures","GlslModal","onClick","fullscreen","edge","window","innerHeight","modalProps","Object","assign","cssClasses","classNames","className","Thumbnail","imgSrc","name","alt","GalleryItem","handleClick","e","log","state","setState","active","handleMouseEnter","handleMouseLeave","preview","full","author","attribution","item","onMouseEnter","onMouseLeave","GameOfLife","img","Image","promise","Promise","resolve","reject","onload","loadImage","then","startStateImg","animate","createGameOfLife","requestAnimationFrame","step","animationFrameReq","cancelAnimationFrame","imageRendering","margin","NEAREST","generateMipmap","canvasEl","getContext","VERTEX_SHADER","fragShaderDisplay","FRAGMENT_SHADER","displayShader","fragShaderStepper","stepShader","displayProg","stepperProg","useProgram","stepperProgCoordLoc","getAttribLocation","stepperProgPreviousStateLoc","getUniformLocation","displayProgStateLoc","displayProgSizeLoc","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","elementBuffer","ELEMENT_ARRAY_BUFFER","texture0","TEXTURE0","texture1","framebuffers","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","nextStateIndex","previousStateIndex","enableVertexAttribArray","uniform1i","drawElements","TRIANGLE_FAN","uniform2f","ColorAutomata","nextFrame","createColorAutomata","velocityEase","invertBounce","cohesionWeight","alignmentWeight","separationWeight","separationThreshold","velocityWeight","reqId","Automata","frameBuffers","seed","min","max","i","Math","floor","random","randomImage","idx","push","frameBuffer","id","Error","gpgpu","options","shaderCode","uniformDefinitions","createVertexShader","coordLoc","vertexArray","mappedUniforms","_","mapValues","loc","uniforms","forOwn","value","isArray","updateVelocity","velocityShader","previousVelocity","alignment","cohesion","separation","size","updatePosition","positionShader","previousPosition","currentVelocity","invertVelocity","invertVelocityShader","positionTex","velocityTex","neighborAverage","neighborAverageShader","tex","separationShader","copy","copyShader","automata","time","performance","now","FullScreenAutomata","shaders","innerWidth","ColorGrid","FullScreenGliderGun","Gallery","Link","to","AppRouter","Route","path","exact","render","makeStats","stats","Stats","shaderVariants","automataShaders","map","variant","reduce","acc","concat","promises","frag","fetch","process","response","text","responseText","enabled","document","body","appendChild","dom","right","left","loop","update","undefined","removeChild","showFpsCounter","all","responses","utils","keys","forEach","replace","ReactDOM","App","getElementById"],"mappings":"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","file":"static/js/main.641a7801.chunk.js","sourcesContent":["export const DEFAULT_VERTEX_SHADER = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\nvarying vec2 v_texcoord;\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_texcoord = a_texcoord;\n}\n`;\n\nexport const createProgram = (gl, vertexShader, fragmentShader) => {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error(\"Error linking program\", gl.getProgramInfoLog(program));\n  }\n  return program;\n};\n\nexport const createShader = (gl, type, src) => {\n  const s = gl.createShader(type);\n  gl.shaderSource(s, src);\n  gl.compileShader(s);\n  if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) {\n    console.error(\n      \"Could not compile shader\",\n      type,\n      src,\n      gl.getShaderInfoLog(s)\n    );\n  }\n  return s;\n};\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport const randomImage = ({ width, height }) => {\n  let buffer = [];\n  for (let i = 0; i < width * height * 3; i++) {\n    buffer[i] = randomInt(0, 255);\n  }\n  return new Uint8Array(buffer);\n};\nexport const blankImage = ({ width, height }) => {\n  let buffer = new Uint8Array(3 * width * height);\n  buffer.fill(128, 0, buffer.length);\n  return buffer;\n};\n\nexport const loadImage = src => {\n  const img = new Image();\n  const promise = new Promise((resolve, reject) => {\n    img.onload = () => {\n      resolve(img);\n    };\n  });\n  img.src = src;\n  return promise;\n};\n\nexport const createTexture = (gl, textureUnit, image, { width, height }) => {\n  const texture = gl.createTexture();\n  gl.activeTexture(textureUnit);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    width,\n    height,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    image\n  );\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  // gl.generateMipmap(gl.TEXTURE_2D);\n  return texture;\n};\n","import React from \"react\";\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\n\nexport const FadeIn = ({ children }) => (\n  <ReactCSSTransitionGroup\n    transitionName=\"fade\"\n    transitionAppear={true}\n    transitionAppearTimeout={500}\n    transitionEnter={false}\n    transitionLeave={false}\n  >\n    {children}\n  </ReactCSSTransitionGroup>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport webglCanvas from \"glslCanvas\";\n\nimport { DEFAULT_VERTEX_SHADER } from \"../utils\";\nimport { FadeIn } from \"./FadeIn\";\n\nexport class GlslCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  initCanvas() {\n    const canvas = this.canvasRef.current;\n    const { fragmentShader } = this.props.code;\n    const { width, height } = this.props.display;\n    this.glslCanvas = new webglCanvas(canvas);\n    this.glslCanvas.load(fragmentShader);\n    canvas.style.width = width;\n    canvas.style.height = height;\n  }\n\n  componentDidMount() {\n    this.initCanvas();\n  }\n\n  render() {\n    const { width, height } = this.props.display;\n    const { fragmentShader, vertexShader } = this.props.code;\n    return (\n      <FadeIn>\n        <canvas\n          width={width}\n          height={height}\n          data-fragment={fragmentShader}\n          data-vertex={vertexShader}\n          ref={this.canvasRef}\n        />\n      </FadeIn>\n    );\n  }\n}\nGlslCanvas.propTypes = {\n  code: PropTypes.shape({\n    fragmentShader: PropTypes.string.isRequired,\n    vertexShader: PropTypes.string,\n    textures: PropTypes.arrayOf(PropTypes.string)\n  })\n};\nGlslCanvas.defaultProps = {\n  code: {\n    vertexShader: DEFAULT_VERTEX_SHADER,\n    textures: []\n  }\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { GlslCanvas } from \"./GlslCanvas\";\n\nexport class GlslModal extends React.Component {\n  render() {\n    const { onClick } = this.props;\n    const { fullscreen } = this.props.display;\n    const display = {};\n    if (fullscreen === \"square\") {\n      // hardcoding for the 256-colors shader\n      const margin = 25;\n      const edge =\n        window.innerHeight - margin - ((window.innerHeight - margin) % 256);\n      display.width = edge + \"px\";\n      display.height = edge + \"px\";\n    } else if (fullscreen === \"fill\") {\n      display.width = \"100%\";\n      display.height = \"100%\";\n    }\n    const modalProps = Object.assign({}, this.props, { display });\n    const cssClasses = classNames(\"gallery-modal\", fullscreen);\n    return (\n      <div className={cssClasses} onClick={onClick}>\n        <GlslCanvas {...modalProps} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { FadeIn } from \"./FadeIn\";\n\nexport const Thumbnail = ({ imgSrc, name, width, height }) => (\n  <FadeIn>\n    <img src={imgSrc} alt={name} width={width} height={height} />\n  </FadeIn>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GlslCanvas } from \"./GlslCanvas\";\nimport { GlslModal } from \"./GlslModal\";\nimport { Thumbnail } from \"./Thumbnail\";\n\nexport class GalleryItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { active: false };\n  }\n\n  handleClick = e => {\n    console.log(\"click\", this.state);\n    const { fullscreen } = this.state;\n    this.setState({ fullscreen: !fullscreen, active: false });\n  };\n\n  handleMouseEnter = e => {\n    console.log(\"enter\");\n    this.setState({ active: true });\n  };\n\n  handleMouseLeave = e => {\n    console.log(\"leave\");\n    this.setState({ active: false });\n  };\n\n  render() {\n    const { name, imgSrc, preview, full } = this.props;\n    const { width, height } = this.props.display;\n    const { active, fullscreen } = this.state;\n    const { author } = this.props.attribution;\n    const item = (\n      <div\n        className=\"gallery-item\"\n        width={width}\n        height={height}\n        onClick={this.handleClick}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        {active ? (\n          preview(this.props)\n        ) : (\n          <Thumbnail\n            imgSrc={imgSrc}\n            name={name}\n            width={width}\n            height={height}\n          />\n        )}\n        <div className=\"credits\">\n          <p className=\"author label\">{author}</p>\n          <p className=\"title label\">{name}</p>\n        </div>\n      </div>\n    );\n    return fullscreen ? (\n      <span>\n        {full(this.props, this.handleClick)}\n        {item}\n      </span>\n    ) : (\n      item\n    );\n  }\n}\n\nGalleryItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  imgSrc: PropTypes.string.isRequired,\n  display: PropTypes.shape({\n    width: PropTypes.string,\n    height: PropTypes.string,\n    fullscreen: PropTypes.oneOf([\"fill\", \"square\"])\n  }),\n  attribution: PropTypes.shape({\n    author: PropTypes.string,\n    date: PropTypes.instanceOf(Date),\n    credits: PropTypes.string,\n    link: PropTypes.string\n  })\n};\n\nGalleryItem.defaultProps = {\n  display: {\n    width: \"256px\",\n    height: \"256px\",\n    fullscreen: \"square\"\n  },\n  attribution: {},\n  preview: props => <GlslCanvas {...props} />,\n  full: (props, onClick) => <GlslModal {...props} onClick={onClick} />\n};\n","import React from \"react\";\nimport { createProgram, createShader, loadImage } from \"../../utils\";\n\nexport class GameOfLife extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { code } = this.props;\n    const canvas = this.canvasRef.current;\n    loadImage(\"frag/game-of-life/start-state.png\").then(startStateImg => {\n      const { animate } = createGameOfLife(canvas, code, startStateImg);\n      const step = () => {\n        animate();\n        this.animationFrameReq = requestAnimationFrame(step);\n      };\n      requestAnimationFrame(step);\n    });\n  }\n\n  componentWillUnmount() {\n    console.log(\"Clearing animation frame request \", this.animationFrameReq);\n    cancelAnimationFrame(this.animationFrameReq);\n  }\n\n  render() {\n    const { fragmentShader, vertexShader } = this.props.code;\n    const { width, height } = this.props.display;\n    return (\n      <canvas\n        width=\"64\"\n        height=\"64\"\n        data-fragment={fragmentShader}\n        data-vertex={vertexShader}\n        ref={this.canvasRef}\n        style={{\n          width: `${width}`,\n          height: `${height}`,\n          imageRendering: \"pixelated\",\n          display: \"block\",\n          margin: \"auto\"\n        }}\n      />\n    );\n  }\n}\n\nconst createTexture = (gl, activeTexture, image) => {\n  const texture = gl.createTexture();\n  gl.activeTexture(activeTexture);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  return texture;\n};\n\nconst createGameOfLife = (canvasEl, code, startStateImg) => {\n  const gl = canvasEl.getContext(\"webgl\");\n\n  const vertexShader = createShader(\n    gl,\n    gl.VERTEX_SHADER,\n    \"attribute vec2 coord; void main(void) { gl_Position = vec4(coord, 0.0, 1.0); }\"\n  );\n  const fragShaderDisplay = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    code.displayShader\n  );\n  const fragShaderStepper = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    code.stepShader\n  );\n\n  const displayProg = createProgram(gl, vertexShader, fragShaderDisplay);\n  const stepperProg = createProgram(gl, vertexShader, fragShaderStepper);\n\n  gl.useProgram(stepperProg);\n\n  const stepperProgCoordLoc = gl.getAttribLocation(stepperProg, \"coord\");\n  const stepperProgPreviousStateLoc = gl.getUniformLocation(\n    stepperProg,\n    \"previousState\"\n  );\n\n  const displayProgStateLoc = gl.getUniformLocation(displayProg, \"tex\");\n  const displayProgSizeLoc = gl.getUniformLocation(displayProg, \"size\");\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n    gl.STATIC_DRAW\n  );\n\n  // Note we must bind ARRAY_BUFFER before running vertexAttribPointer!\n  // This is confusing and deserves a blog post\n  // https://stackoverflow.com/questions/7617668/glvertexattribpointer-needed-everytime-glbindbuffer-is-called\n  gl.vertexAttribPointer(stepperProgCoordLoc, 2, gl.FLOAT, false, 0, 0);\n\n  const elementBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint8Array([0, 1, 2, 3]),\n    gl.STATIC_DRAW\n  );\n\n  const texture0 = createTexture(gl, gl.TEXTURE0, startStateImg);\n  const texture1 = createTexture(gl, gl.TEXTURE0 + 1, startStateImg);\n\n  const framebuffers = [gl.createFramebuffer(), gl.createFramebuffer()];\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[0]);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture0,\n    0\n  );\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[1]);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture1,\n    0\n  );\n\n  let nextStateIndex = 0;\n  const animate = function animate() {\n    const previousStateIndex = 1 - nextStateIndex;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[nextStateIndex]);\n    gl.useProgram(stepperProg);\n    gl.enableVertexAttribArray(stepperProgCoordLoc);\n    gl.uniform1i(stepperProgPreviousStateLoc, previousStateIndex);\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.useProgram(displayProg);\n    gl.uniform1i(displayProgStateLoc, nextStateIndex);\n    gl.uniform2f(displayProgSizeLoc, gl.canvas.width, gl.canvas.height);\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n\n    nextStateIndex = previousStateIndex;\n  };\n  return { animate };\n};\n","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  createProgram,\n  createShader,\n  createTexture,\n  randomImage,\n  blankImage\n} from \"../../utils\";\n\nexport class ColorAutomata extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { code } = this.props;\n    const { nextFrame } = createColorAutomata(\n      this.canvasRef.current,\n      code,\n      this.props\n    );\n    const step = () => {\n      // console.time(\"step\");\n      nextFrame();\n      this.animationFrameReq = requestAnimationFrame(step);\n      // console.timeEnd(\"step\");\n    };\n    requestAnimationFrame(step);\n  }\n\n  componentWillUnmount() {\n    // console.log(\"Clearing animation frame request \", this.animationFrameReq);\n    cancelAnimationFrame(this.animationFrameReq);\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <canvas\n        width={width}\n        height={height}\n        ref={this.canvasRef}\n        style={{ width: `${width}px`, height: `${height}px` }}\n      />\n    );\n  }\n}\n\nColorAutomata.defaultProps = {\n  width: 256,\n  height: 256,\n  velocityEase: 0.16,\n  invertBounce: 1,\n  cohesionWeight: 1.6,\n  alignmentWeight: 0.8,\n  separationWeight: 4,\n  separationThreshold: 1 / 16,\n  velocityWeight: 0.98\n};\n\nclass Automata {\n  constructor(gl, { width, height }) {\n    this.active = 1;\n    this.frameBuffers = [];\n    const seed = randomImage({ width, height });\n    for (let idx = 0; idx < 8; idx++) {\n      const image = idx <= 1 ? seed : blankImage({ width, height });\n      const texture = createTexture(gl, gl[`TEXTURE${idx}`], image, {\n        width,\n        height\n      });\n      const buffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0\n      );\n      this.frameBuffers.push({ textureUnit: idx, frameBuffer: buffer });\n    }\n  }\n\n  swap() {\n    this.active = 1 - this.active;\n  }\n\n  textureUnit(id) {\n    switch (id) {\n      case \"colorBuffer\":\n        return 0;\n      case \"colorPrimary\":\n        return 1;\n      case \"velocityBuffer\":\n        return 2;\n      case \"velocityPrimary\":\n        return 3;\n      case \"cohesion\":\n        return 4;\n      case \"alignment\":\n        return 5;\n      case \"separation\":\n        return 6;\n      case \"aux\":\n        return 7;\n      default:\n        throw new Error(\"id not recognized\");\n    }\n  }\n\n  frameBuffer(id) {\n    return this.frameBuffers[this.textureUnit(id)].frameBuffer;\n  }\n}\n\nconst createVertexShader = gl => {\n  return createShader(\n    gl,\n    gl.VERTEX_SHADER,\n    \"attribute vec2 coord; void main(void) { gl_Position = vec4(coord, 0.0, 1.0); }\"\n  );\n};\n\nconst toArray = value => (_.isArray(value) ? value : [value]);\nconst gpgpu = (gl, options) => {\n  const { shaderCode, uniformDefinitions } = options;\n  const vertexShader = createVertexShader(gl);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, shaderCode);\n  const program = createProgram(gl, vertexShader, fragmentShader);\n  const coordLoc = gl.getAttribLocation(program, \"coord\");\n\n  const vertexBuffer = gl.createBuffer();\n  const vertexArray = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  // gl.bufferData(gl.ARRAY_BUFFER, vertexArray, gl.STATIC_DRAW);\n  gl.bufferData(gl.ARRAY_BUFFER, vertexArray, gl.STATIC_DRAW);\n\n  // Note we must bind ARRAY_BUFFER before running vertexAttribPointer!\n  // This is confusing and deserves a blog post\n  // https://stackoverflow.com/questions/7617668/glvertexattribpointer-needed-everytime-glbindbuffer-is-called\n  gl.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 0, 0);\n\n  const elementBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint8Array([0, 1, 2, 3]),\n    gl.STATIC_DRAW\n  );\n\n  const mappedUniforms = _.mapValues(uniformDefinitions, (props, name) =>\n    Object.assign(props, { loc: gl.getUniformLocation(program, name) })\n  );\n\n  return (frameBuffer, uniforms) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.useProgram(program);\n    gl.enableVertexAttribArray(coordLoc);\n    _.forOwn(mappedUniforms, (props, name) => {\n      gl[props.type](props.loc, ...toArray(uniforms[name]));\n    });\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n  };\n};\n\nconst createColorAutomata = (canvasEl, code, options) => {\n  const gl = canvasEl.getContext(\"webgl\");\n  const { width, height } = options;\n  const updateVelocity = gpgpu(gl, {\n    shaderCode: code.velocityShader,\n    uniformDefinitions: {\n      previousVelocity: { type: \"uniform1i\" },\n      alignment: { type: \"uniform1i\" },\n      cohesion: { type: \"uniform1i\" },\n      separation: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      velocityWeight: { type: \"uniform1f\" },\n      alignmentWeight: { type: \"uniform1f\" },\n      cohesionWeight: { type: \"uniform1f\" },\n      separationWeight: { type: \"uniform1f\" },\n      velocityEase: { type: \"uniform1f\" }\n    }\n  });\n\n  const updatePosition = gpgpu(gl, {\n    shaderCode: code.positionShader,\n    uniformDefinitions: {\n      previousPosition: { type: \"uniform1i\" },\n      currentVelocity: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const invertVelocity = gpgpu(gl, {\n    shaderCode: code.invertVelocityShader,\n    uniformDefinitions: {\n      positionTex: { type: \"uniform1i\" },\n      velocityTex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      invertBounce: { type: \"uniform1f\" }\n    }\n  });\n\n  const neighborAverage = gpgpu(gl, {\n    shaderCode: code.neighborAverageShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const separation = gpgpu(gl, {\n    shaderCode: code.separationShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      separationThreshold: { type: \"uniform1f\" }\n    }\n  });\n\n  const copy = gpgpu(gl, {\n    shaderCode: code.copyShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const display = gpgpu(gl, {\n    shaderCode: code.displayShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const automata = new Automata(gl, { width, height });\n  const {\n    invertBounce,\n    separationThreshold,\n    alignmentWeight,\n    cohesionWeight,\n    separationWeight,\n    velocityEase,\n    velocityWeight\n  } = options;\n  console.log(options);\n  const nextFrame = function() {\n    neighborAverage(automata.frameBuffer(\"cohesion\"), {\n      tex: [automata.textureUnit(\"colorPrimary\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    neighborAverage(automata.frameBuffer(\"alignment\"), {\n      tex: [automata.textureUnit(\"velocityPrimary\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    separation(automata.frameBuffer(\"separation\"), {\n      tex: [automata.textureUnit(\"colorPrimary\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      separationThreshold\n    });\n\n    updateVelocity(automata.frameBuffer(\"velocityBuffer\"), {\n      previousVelocity: [automata.textureUnit(\"velocityPrimary\")],\n      alignment: [automata.textureUnit(\"alignment\")],\n      cohesion: [automata.textureUnit(\"cohesion\")],\n      separation: [automata.textureUnit(\"separation\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      time: [performance.now() / 1000],\n      alignmentWeight,\n      separationWeight,\n      cohesionWeight,\n      velocityEase,\n      velocityWeight\n    });\n\n    invertVelocity(automata.frameBuffer(\"aux\"), {\n      positionTex: [automata.textureUnit(\"colorBuffer\")],\n      velocityTex: [automata.textureUnit(\"velocityBuffer\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      invertBounce\n    });\n\n    copy(automata.frameBuffer(\"velocityBuffer\"), {\n      tex: [automata.textureUnit(\"aux\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    updatePosition(automata.frameBuffer(\"aux\"), {\n      previousPosition: [automata.textureUnit(\"colorBuffer\")],\n      currentVelocity: [automata.textureUnit(\"velocityBuffer\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    copy(automata.frameBuffer(\"colorBuffer\"), {\n      tex: [automata.textureUnit(\"aux\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    copy(automata.frameBuffer(\"velocityPrimary\"), {\n      tex: [automata.textureUnit(\"velocityBuffer\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    copy(automata.frameBuffer(\"colorPrimary\"), {\n      tex: [automata.textureUnit(\"colorBuffer\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    display(null, {\n      tex: [automata.textureUnit(\"colorPrimary\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n  };\n  return { automata, nextFrame };\n};\n","import Stats from \"stats.js\";\n\nfunction makeStats() {\n  // poor man's run once\n  if (makeStats.stats) return makeStats.stats;\n  makeStats.stats = new Stats();\n  return makeStats.stats;\n}\n\nlet reqId;\nexport const showFpsCounter = enabled => {\n  const stats = makeStats();\n  if (enabled && !reqId) {\n    document.body.appendChild(stats.dom);\n    stats.dom.style.right = 0;\n    stats.dom.style.left = null;\n    reqId = requestAnimationFrame(function loop() {\n      stats.update();\n      reqId = requestAnimationFrame(loop);\n    });\n  } else if (!enabled && reqId) {\n    cancelAnimationFrame(reqId);\n    reqId = undefined;\n    document.body.removeChild(stats.dom);\n  }\n};\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { GalleryItem } from \"./components/GalleryItem\";\nimport { GlslModal } from \"./components/GlslModal\";\nimport { GameOfLife } from \"./components/gallery/GameOfLife\";\nimport { ColorAutomata } from \"./components/gallery/ColorAutomata\";\n\nconst FullScreenAutomata = ({ shaders }) => (\n  <ColorAutomata\n    name=\"Color Automata (WIP)\"\n    imgSrc=\"./frag/color-automata/color-automata.png\"\n    code={{\n      copyShader: shaders[\"frag/copy.frag\"],\n      displayShader: shaders[\"frag/display.frag\"],\n      velocityShader: shaders[\"frag/color-automata/velocity.frag\"],\n      positionShader: shaders[\"frag/color-automata/position.frag\"],\n      invertVelocityShader: shaders[\"frag/color-automata/invert-velocity.frag\"],\n      neighborAverageShader:\n        shaders[\"frag/color-automata/neighbor-average.frag\"],\n      separationShader: shaders[\"frag/color-automata/separation.frag\"]\n    }}\n    width={window.innerWidth}\n    height={window.innerHeight}\n  />\n);\n\nconst ColorGrid = ({ shaders }) => (\n  <GlslModal\n    name=\"256 colors\"\n    imgSrc=\"./frag/256-colors.png\"\n    display={{ fullscreen: \"square\" }}\n    code={{ fragmentShader: shaders[\"frag/256-colors.frag\"] }}\n    onClick={() => null}\n  />\n);\n\nconst FullScreenGliderGun = ({ shaders }) => (\n  <GameOfLife\n    display={{\n      width: `${window.innerHeight}px`,\n      height: `${window.innerHeight}px`\n    }}\n    code={{\n      displayShader: shaders[\"frag/display.frag\"],\n      stepShader: shaders[\"frag/game-of-life/game-of-life.frag\"]\n    }}\n  />\n);\n\nclass Gallery extends Component {\n  render() {\n    const { shaders } = this.props;\n    return (\n      <div>\n        <Link to=\"/256-colors\">\n          <GalleryItem\n            name=\"256 colors\"\n            imgSrc=\"./frag/256-colors.png\"\n            code={{ fragmentShader: shaders[\"frag/256-colors.frag\"] }}\n          />\n        </Link>\n        <Link to=\"/glider-gun\">\n          <GalleryItem\n            name=\"Glider gun\"\n            imgSrc=\"./frag/game-of-life/glider-gun.png\"\n            code={{\n              displayShader: shaders[\"frag/display.frag\"],\n              stepShader: shaders[\"frag/game-of-life/game-of-life.frag\"]\n            }}\n            preview={props => <GameOfLife {...props} />}\n            full={() => null}\n          />\n        </Link>\n        <Link to=\"/color-automata\">\n          <GalleryItem\n            name=\"Color Automata\"\n            imgSrc=\"./frag/color-automata/color-automata.png\"\n            code={{\n              copyShader: shaders[\"frag/copy.frag\"],\n              displayShader: shaders[\"frag/display.frag\"],\n              velocityShader: shaders[\"frag/color-automata/velocity.frag\"],\n              positionShader: shaders[\"frag/color-automata/position.frag\"],\n              invertVelocityShader:\n                shaders[\"frag/color-automata/invert-velocity.frag\"],\n              neighborAverageShader:\n                shaders[\"frag/color-automata/neighbor-average.frag\"],\n              separationShader: shaders[\"frag/color-automata/separation.frag\"]\n            }}\n            preview={props => <ColorAutomata {...props} />}\n            full={() => null}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst AppRouter = ({ shaders }) => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact render={() => <Gallery shaders={shaders} />} />\n      <Route\n        path=\"/256-colors/\"\n        render={() => <ColorGrid shaders={shaders} />}\n      />\n      <Route\n        path=\"/glider-gun/\"\n        render={() => <FullScreenGliderGun shaders={shaders} />}\n      />\n      <Route\n        path=\"/color-automata/\"\n        render={() => <FullScreenAutomata shaders={shaders} />}\n      />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n","const automata = [\"frag/color-automata/\"];\nconst shaderVariants = [\n  \"velocity\",\n  \"position\",\n  \"invert-velocity\",\n  \"neighbor-average\",\n  \"separation\",\n  \"utils\"\n];\nconst automataShaders = automata\n  .map(path => shaderVariants.map(variant => `${path}${variant}.frag`))\n  .reduce((acc, shaders) => acc.concat(shaders), []);\n\nconst promises = [\n  \"frag/256-colors.frag\",\n  \"frag/display.frag\",\n  \"frag/copy.frag\",\n  \"frag/game-of-life/game-of-life.frag\"\n]\n  .concat(automataShaders)\n  .map(frag =>\n    fetch(process.env.PUBLIC_URL + \"/\" + frag)\n      .then(response => response.text())\n      .then(responseText => ({ [frag]: responseText }))\n  );\n\nexport const loadShaders = function loadShaders() {\n  return Promise.all(promises)\n    .then(responses => Object.assign({}, ...responses))\n    .then(shaders => {\n      const utils = shaders[\"frag/color-automata/utils.frag\"];\n      Object.keys(shaders).forEach(name => {\n        shaders[name] = shaders[name].replace(\"// include utils.frag\", utils);\n      });\n      return shaders;\n    });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport { showFpsCounter } from \"./stats\";\nimport { loadShaders } from \"./loader\";\n\nshowFpsCounter(true);\n\nloadShaders().then(shaders => {\n  ReactDOM.render(<App shaders={shaders} />, document.getElementById(\"root\"));\n});\n"],"sourceRoot":""}