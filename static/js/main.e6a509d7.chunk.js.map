{"version":3,"sources":["utils.js","components/FadeIn.js","components/GlslCanvas.js","components/GlslModal.js","components/Thumbnail.js","components/GalleryItem.js","components/gallery/GameOfLife.js","components/gallery/ColorAutomata.js","stats.js","App.js","loader.js","index.js"],"names":["createProgram","gl","vertexShader","fragmentShader","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","createShader","type","src","s","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","randomImage","_ref","min","max","width","height","buffer","i","Math","floor","random","Uint8Array","blankImage","_ref2","fill","length","createTexture","textureUnit","image","_ref3","texture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","FadeIn","children","react_default","a","createElement","react_addons_css_transition_group_default","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","GlslCanvas","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","inherits","createClass","key","value","canvas","current","code","_this$props$display","display","glslCanvas","webglCanvas","load","style","initCanvas","_this$props$display2","_this$props$code","FadeIn_FadeIn","data-fragment","data-vertex","ref","Component","defaultProps","textures","GlslModal","apply","arguments","onClick","fullscreen","window","innerHeight","modalProps","assign","cssClasses","classNames","className","GlslCanvas_GlslCanvas","Thumbnail","imgSrc","name","alt","GalleryItem","handleClick","e","log","state","setState","active","handleMouseEnter","handleMouseLeave","_this$props","preview","full","_this$state","author","attribution","item","onMouseEnter","onMouseLeave","Thumbnail_Thumbnail","GlslModal_GlslModal","NEAREST","generateMipmap","createGameOfLife","canvasEl","startStateImg","getContext","VERTEX_SHADER","fragShaderDisplay","FRAGMENT_SHADER","displayShader","fragShaderStepper","stepShader","displayProg","stepperProg","useProgram","stepperProgCoordLoc","getAttribLocation","stepperProgPreviousStateLoc","getUniformLocation","displayProgStateLoc","displayProgSizeLoc","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","elementBuffer","ELEMENT_ARRAY_BUFFER","texture0","TEXTURE0","texture1","framebuffers","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","nextStateIndex","animate","previousStateIndex","enableVertexAttribArray","uniform1i","drawElements","TRIANGLE_FAN","uniform2f","ColorAutomata","_this2","nextFrame","createColorAutomata","requestAnimationFrame","step","animationFrameReq","cancelAnimationFrame","concat","velocityEase","invertBounce","cohesionWeight","alignmentWeight","separationWeight","separationThreshold","velocityWeight","reqId","Automata","frameBuffers","seed","idx","push","frameBuffer","id","Error","gpgpu","options","shaderCode","uniformDefinitions","createVertexShader","coordLoc","mappedUniforms","_","mapValues","loc","uniforms","forOwn","toConsumableArray","isArray","updateVelocity","velocityShader","previousVelocity","alignment","cohesion","separation","size","updatePosition","positionShader","previousPosition","currentVelocity","invertVelocity","invertVelocityShader","positionTex","velocityTex","neighborAverage","neighborAverageShader","tex","separationShader","automata","time","performance","now","swap","App","shaders","ColorAutomata_ColorAutomata","innerWidth","makeStats","stats","Stats","shaderVariants","automataShaders","map","path","variant","reduce","acc","promises","frag","fetch","then","response","text","responseText","defineProperty","enabled","document","body","appendChild","dom","right","left","loop","update","undefined","removeChild","showFpsCounter","Promise","all","responses","utils","keys","forEach","replace","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.e6a509d7.chunk.js","sourcesContent":["export const DEFAULT_VERTEX_SHADER = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\nvarying vec2 v_texcoord;\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_texcoord = a_texcoord;\n}\n`;\n\nexport const createProgram = (gl, vertexShader, fragmentShader) => {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error(\"Error linking program\", gl.getProgramInfoLog(program));\n  }\n  return program;\n};\n\nexport const createShader = (gl, type, src) => {\n  const s = gl.createShader(type);\n  gl.shaderSource(s, src);\n  gl.compileShader(s);\n  if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) {\n    console.error(\n      \"Could not compile shader\",\n      type,\n      src,\n      gl.getShaderInfoLog(s)\n    );\n  }\n  return s;\n};\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport const randomImage = ({ width, height }) => {\n  let buffer = [];\n  for (let i = 0; i < width * height * 3; i++) {\n    buffer[i] = randomInt(0, 255);\n  }\n  return new Uint8Array(buffer);\n};\nexport const blankImage = ({ width, height }) => {\n  let buffer = new Uint8Array(3 * width * height);\n  buffer.fill(128, 0, buffer.length);\n  return buffer;\n};\n\nexport const loadImage = src => {\n  const img = new Image();\n  const promise = new Promise((resolve, reject) => {\n    img.onload = () => {\n      resolve(img);\n    };\n  });\n  img.src = src;\n  return promise;\n};\n\nexport const createTexture = (gl, textureUnit, image, { width, height }) => {\n  const texture = gl.createTexture();\n  gl.activeTexture(textureUnit);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    width,\n    height,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    image\n  );\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  // gl.generateMipmap(gl.TEXTURE_2D);\n  return texture;\n};\n","import React from \"react\";\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\n\nexport const FadeIn = ({ children }) => (\n  <ReactCSSTransitionGroup\n    transitionName=\"fade\"\n    transitionAppear={true}\n    transitionAppearTimeout={500}\n    transitionEnter={false}\n    transitionLeave={false}\n  >\n    {children}\n  </ReactCSSTransitionGroup>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport webglCanvas from \"glslCanvas\";\n\nimport { DEFAULT_VERTEX_SHADER } from \"../utils\";\nimport { FadeIn } from \"./FadeIn\";\n\nexport class GlslCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  initCanvas() {\n    const canvas = this.canvasRef.current;\n    const { fragmentShader } = this.props.code;\n    const { width, height } = this.props.display;\n    this.glslCanvas = new webglCanvas(canvas);\n    this.glslCanvas.load(fragmentShader);\n    canvas.style.width = width;\n    canvas.style.height = height;\n  }\n\n  componentDidMount() {\n    this.initCanvas();\n  }\n\n  render() {\n    const { width, height } = this.props.display;\n    const { fragmentShader, vertexShader } = this.props.code;\n    return (\n      <FadeIn>\n        <canvas\n          width={width}\n          height={height}\n          data-fragment={fragmentShader}\n          data-vertex={vertexShader}\n          ref={this.canvasRef}\n        />\n      </FadeIn>\n    );\n  }\n}\nGlslCanvas.propTypes = {\n  code: PropTypes.shape({\n    fragmentShader: PropTypes.string.isRequired,\n    vertexShader: PropTypes.string,\n    textures: PropTypes.arrayOf(PropTypes.string)\n  })\n};\nGlslCanvas.defaultProps = {\n  code: {\n    vertexShader: DEFAULT_VERTEX_SHADER,\n    textures: []\n  }\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { GlslCanvas } from \"./GlslCanvas\";\n\nexport class GlslModal extends React.Component {\n  render() {\n    const { onClick } = this.props;\n    const { fullscreen } = this.props.display;\n    const display = {};\n    if (fullscreen === \"square\") {\n      display.width = window.innerHeight - 100 + \"px\";\n      display.height = window.innerHeight - 100 + \"px\";\n    } else if (fullscreen === \"fill\") {\n      display.width = \"100%\";\n      display.height = \"100%\";\n    }\n    const modalProps = Object.assign({}, this.props, { display });\n    const cssClasses = classNames(\"gallery-modal\", fullscreen);\n    return (\n      <div className={cssClasses} onClick={onClick}>\n        <GlslCanvas {...modalProps} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { FadeIn } from \"./FadeIn\";\n\nexport const Thumbnail = ({ imgSrc, name, width, height }) => (\n  <FadeIn>\n    <img src={imgSrc} alt={name} width={width} height={height} />\n  </FadeIn>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GlslCanvas } from \"./GlslCanvas\";\nimport { GlslModal } from \"./GlslModal\";\nimport { Thumbnail } from \"./Thumbnail\";\n\nexport class GalleryItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { active: false };\n  }\n\n  handleClick = e => {\n    console.log(\"click\", this.state);\n    const { fullscreen } = this.state;\n    this.setState({ fullscreen: !fullscreen, active: false });\n  };\n\n  handleMouseEnter = e => {\n    console.log(\"enter\");\n    this.setState({ active: true });\n  };\n\n  handleMouseLeave = e => {\n    console.log(\"leave\");\n    this.setState({ active: false });\n  };\n\n  render() {\n    const { name, imgSrc, preview, full } = this.props;\n    const { width, height } = this.props.display;\n    const { active, fullscreen } = this.state;\n    const { author } = this.props.attribution;\n    const item = (\n      <div\n        className=\"gallery-item\"\n        width={width}\n        height={height}\n        onClick={this.handleClick}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        {active ? (\n          preview(this.props)\n        ) : (\n          <Thumbnail\n            imgSrc={imgSrc}\n            name={name}\n            width={width}\n            height={height}\n          />\n        )}\n        <div className=\"credits\">\n          <p className=\"author label\">{author}</p>\n          <p className=\"title label\">{name}</p>\n        </div>\n      </div>\n    );\n    return fullscreen ? (\n      <span>\n        {full(this.props, this.handleClick)}\n        {item}\n      </span>\n    ) : (\n      item\n    );\n  }\n}\n\nGalleryItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  imgSrc: PropTypes.string.isRequired,\n  display: PropTypes.shape({\n    width: PropTypes.string,\n    height: PropTypes.string,\n    fullscreen: PropTypes.oneOf([\"fill\", \"square\"])\n  }),\n  attribution: PropTypes.shape({\n    author: PropTypes.string,\n    date: PropTypes.instanceOf(Date),\n    credits: PropTypes.string,\n    link: PropTypes.string\n  })\n};\n\nGalleryItem.defaultProps = {\n  display: {\n    width: \"256px\",\n    height: \"256px\",\n    fullscreen: \"square\"\n  },\n  attribution: {},\n  preview: props => <GlslCanvas {...props} />,\n  full: (props, onClick) => <GlslModal {...props} onClick={onClick} />\n};\n","import React from \"react\";\nimport { createProgram, createShader, loadImage } from \"../../utils\";\n\nexport class GameOfLife extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { code } = this.props;\n    const canvas = this.canvasRef.current;\n    loadImage(\"frag/game-of-life/start-state.png\").then(startStateImg => {\n      const { animate } = createGameOfLife(canvas, code, startStateImg);\n      const step = () => {\n        console.time(\"step\");\n        animate();\n        this.animationFrameReq = requestAnimationFrame(step);\n        console.timeEnd(\"step\");\n      };\n      requestAnimationFrame(step);\n    });\n  }\n\n  componentWillUnmount() {\n    console.log(\"Clearing animation frame request \", this.animationFrameReq);\n    cancelAnimationFrame(this.animationFrameReq);\n  }\n\n  render() {\n    const { fragmentShader, vertexShader } = this.props.code;\n    return (\n      <canvas\n        width=\"64\"\n        height=\"64\"\n        data-fragment={fragmentShader}\n        data-vertex={vertexShader}\n        ref={this.canvasRef}\n        style={{ width: \"256px\", height: \"256px\", imageRendering: \"pixelated\" }}\n      />\n    );\n  }\n}\n\nconst createTexture = (gl, activeTexture, image) => {\n  const texture = gl.createTexture();\n  gl.activeTexture(activeTexture);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  return texture;\n};\n\nconst createGameOfLife = (canvasEl, code, startStateImg) => {\n  const gl = canvasEl.getContext(\"webgl\");\n\n  const vertexShader = createShader(\n    gl,\n    gl.VERTEX_SHADER,\n    \"attribute vec2 coord; void main(void) { gl_Position = vec4(coord, 0.0, 1.0); }\"\n  );\n  const fragShaderDisplay = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    code.displayShader\n  );\n  const fragShaderStepper = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    code.stepShader\n  );\n\n  const displayProg = createProgram(gl, vertexShader, fragShaderDisplay);\n  const stepperProg = createProgram(gl, vertexShader, fragShaderStepper);\n\n  gl.useProgram(stepperProg);\n\n  const stepperProgCoordLoc = gl.getAttribLocation(stepperProg, \"coord\");\n  const stepperProgPreviousStateLoc = gl.getUniformLocation(\n    stepperProg,\n    \"previousState\"\n  );\n\n  const displayProgStateLoc = gl.getUniformLocation(displayProg, \"tex\");\n  const displayProgSizeLoc = gl.getUniformLocation(displayProg, \"size\");\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n    gl.STATIC_DRAW\n  );\n\n  // Note we must bind ARRAY_BUFFER before running vertexAttribPointer!\n  // This is confusing and deserves a blog post\n  // https://stackoverflow.com/questions/7617668/glvertexattribpointer-needed-everytime-glbindbuffer-is-called\n  gl.vertexAttribPointer(stepperProgCoordLoc, 2, gl.FLOAT, false, 0, 0);\n\n  const elementBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint8Array([0, 1, 2, 3]),\n    gl.STATIC_DRAW\n  );\n\n  const texture0 = createTexture(gl, gl.TEXTURE0, startStateImg);\n  const texture1 = createTexture(gl, gl.TEXTURE0 + 1, startStateImg);\n\n  const framebuffers = [gl.createFramebuffer(), gl.createFramebuffer()];\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[0]);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture0,\n    0\n  );\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[1]);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture1,\n    0\n  );\n\n  let nextStateIndex = 0;\n  const animate = function animate() {\n    const previousStateIndex = 1 - nextStateIndex;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffers[nextStateIndex]);\n    gl.useProgram(stepperProg);\n    gl.enableVertexAttribArray(stepperProgCoordLoc);\n    gl.uniform1i(stepperProgPreviousStateLoc, previousStateIndex);\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.useProgram(displayProg);\n    gl.uniform1i(displayProgStateLoc, nextStateIndex);\n    gl.uniform2f(displayProgSizeLoc, gl.canvas.width, gl.canvas.height);\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n\n    nextStateIndex = previousStateIndex;\n  };\n  return { animate };\n};\n","import React from \"react\";\nimport _ from \"lodash\";\n\nimport {\n  createProgram,\n  createShader,\n  createTexture,\n  randomImage,\n  blankImage\n} from \"../../utils\";\n\nexport class ColorAutomata extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { code } = this.props;\n    const { nextFrame } = createColorAutomata(\n      this.canvasRef.current,\n      code,\n      this.props\n    );\n    const step = () => {\n      // console.time(\"step\");\n      nextFrame();\n      this.animationFrameReq = requestAnimationFrame(step);\n      // console.timeEnd(\"step\");\n    };\n    requestAnimationFrame(step);\n  }\n\n  componentWillUnmount() {\n    // console.log(\"Clearing animation frame request \", this.animationFrameReq);\n    cancelAnimationFrame(this.animationFrameReq);\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <canvas\n        width={width}\n        height={height}\n        ref={this.canvasRef}\n        style={{ width: `${width}px`, height: `${height}px` }}\n      />\n    );\n  }\n}\n\nColorAutomata.defaultProps = {\n  width: 256,\n  height: 256,\n  velocityEase: 0.33,\n  invertBounce: 1,\n  cohesionWeight: 0.5,\n  alignmentWeight: 0.5, // CMYK\n  // alignmentWeight: 1 / 8, // RGB\n  separationWeight: 4,\n  separationThreshold: 1 / 2,\n  velocityWeight: 1\n};\n\nclass Automata {\n  constructor(gl, { width, height }) {\n    this.active = 1;\n    this.frameBuffers = [];\n    const seed = randomImage({ width, height });\n    for (let idx = 0; idx < 7; idx++) {\n      const image = idx <= 1 ? seed : blankImage({ width, height });\n      const texture = createTexture(gl, gl[`TEXTURE${idx}`], image, {\n        width,\n        height\n      });\n      const buffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0\n      );\n      this.frameBuffers.push({ textureUnit: idx, frameBuffer: buffer });\n    }\n  }\n\n  swap() {\n    this.active = 1 - this.active;\n  }\n\n  textureUnit(id) {\n    switch (id) {\n      case \"prevPosition\":\n        return this.active ? 0 : 1;\n      case \"nextPosition\":\n        return this.active ? 1 : 0;\n      case \"prevVelocity\":\n        return 2;\n      case \"nextVelocity\":\n        return 3;\n      case \"cohesion\":\n        return 4;\n      case \"alignment\":\n        return 5;\n      case \"separation\":\n        return 6;\n      default:\n        throw new Error(\"id not recognized\");\n    }\n  }\n\n  frameBuffer(id) {\n    return this.frameBuffers[this.textureUnit(id)].frameBuffer;\n  }\n}\n\nconst createVertexShader = gl => {\n  return createShader(\n    gl,\n    gl.VERTEX_SHADER,\n    \"attribute vec2 coord; void main(void) { gl_Position = vec4(coord, 0.0, 1.0); }\"\n  );\n};\n\nconst toArray = value => (_.isArray(value) ? value : [value]);\nconst gpgpu = (gl, options) => {\n  const { shaderCode, uniformDefinitions } = options;\n  const vertexShader = createVertexShader(gl);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, shaderCode);\n  const program = createProgram(gl, vertexShader, fragmentShader);\n  const coordLoc = gl.getAttribLocation(program, \"coord\");\n\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n    gl.STATIC_DRAW\n  );\n\n  // Note we must bind ARRAY_BUFFER before running vertexAttribPointer!\n  // This is confusing and deserves a blog post\n  // https://stackoverflow.com/questions/7617668/glvertexattribpointer-needed-everytime-glbindbuffer-is-called\n  gl.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 0, 0);\n\n  const elementBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint8Array([0, 1, 2, 3]),\n    gl.STATIC_DRAW\n  );\n\n  const mappedUniforms = _.mapValues(uniformDefinitions, (props, name) =>\n    Object.assign(props, { loc: gl.getUniformLocation(program, name) })\n  );\n\n  return (frameBuffer, uniforms) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.useProgram(program);\n    gl.enableVertexAttribArray(coordLoc);\n    _.forOwn(mappedUniforms, (props, name) => {\n      gl[props.type](props.loc, ...toArray(uniforms[name]));\n    });\n    gl.drawElements(gl.TRIANGLE_FAN, 4, gl.UNSIGNED_BYTE, 0);\n  };\n};\n\nconst createColorAutomata = (canvasEl, code, options) => {\n  const gl = canvasEl.getContext(\"webgl\");\n  const { width, height } = options;\n  const updateVelocity = gpgpu(gl, {\n    shaderCode: code.velocityShader,\n    uniformDefinitions: {\n      previousVelocity: { type: \"uniform1i\" },\n      alignment: { type: \"uniform1i\" },\n      cohesion: { type: \"uniform1i\" },\n      separation: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      velocityWeight: { type: \"uniform1f\" },\n      alignmentWeight: { type: \"uniform1f\" },\n      cohesionWeight: { type: \"uniform1f\" },\n      separationWeight: { type: \"uniform1f\" },\n      velocityEase: { type: \"uniform1f\" }\n    }\n  });\n\n  const updatePosition = gpgpu(gl, {\n    shaderCode: code.positionShader,\n    uniformDefinitions: {\n      previousPosition: { type: \"uniform1i\" },\n      currentVelocity: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const invertVelocity = gpgpu(gl, {\n    shaderCode: code.invertVelocityShader,\n    uniformDefinitions: {\n      positionTex: { type: \"uniform1i\" },\n      velocityTex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      invertBounce: { type: \"uniform1f\" }\n    }\n  });\n\n  const neighborAverage = gpgpu(gl, {\n    shaderCode: code.neighborAverageShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const separation = gpgpu(gl, {\n    shaderCode: code.separationShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" },\n      separationThreshold: { type: \"uniform1f\" }\n    }\n  });\n\n  const display = gpgpu(gl, {\n    shaderCode: code.displayShader,\n    uniformDefinitions: {\n      tex: { type: \"uniform1i\" },\n      size: { type: \"uniform2f\" }\n    }\n  });\n\n  const automata = new Automata(gl, { width, height });\n  const {\n    invertBounce,\n    separationThreshold,\n    alignmentWeight,\n    cohesionWeight,\n    separationWeight,\n    velocityEase,\n    velocityWeight\n  } = options;\n  console.log(options);\n  const nextFrame = function() {\n    invertVelocity(automata.frameBuffer(\"prevVelocity\"), {\n      positionTex: [automata.textureUnit(\"prevPosition\")],\n      velocityTex: [automata.textureUnit(\"nextVelocity\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      invertBounce\n    });\n\n    neighborAverage(automata.frameBuffer(\"cohesion\"), {\n      tex: [automata.textureUnit(\"prevPosition\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    neighborAverage(automata.frameBuffer(\"alignment\"), {\n      tex: [automata.textureUnit(\"prevVelocity\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    separation(automata.frameBuffer(\"separation\"), {\n      tex: [automata.textureUnit(\"prevPosition\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      separationThreshold\n    });\n\n    updateVelocity(automata.frameBuffer(\"nextVelocity\"), {\n      previousVelocity: [automata.textureUnit(\"prevVelocity\")],\n      alignment: [automata.textureUnit(\"alignment\")],\n      cohesion: [automata.textureUnit(\"cohesion\")],\n      separation: [automata.textureUnit(\"separation\")],\n      size: [gl.canvas.width, gl.canvas.height],\n      time: [performance.now() / 1000],\n      alignmentWeight,\n      separationWeight,\n      cohesionWeight,\n      velocityEase,\n      velocityWeight\n    });\n\n    updatePosition(automata.frameBuffer(\"nextPosition\"), {\n      previousPosition: [automata.textureUnit(\"prevPosition\")],\n      currentVelocity: [automata.textureUnit(\"nextVelocity\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n\n    display(null, {\n      // tex: [automata.textureUnit(\"nextVelocity\")],\n      tex: [automata.textureUnit(\"nextPosition\")],\n      size: [gl.canvas.width, gl.canvas.height]\n    });\n    automata.swap();\n\n    // display(null, { });\n  };\n  return { automata, nextFrame };\n};\n","import Stats from \"stats.js\";\n\nfunction makeStats() {\n  // poor man's run once\n  if (makeStats.stats) return makeStats.stats;\n  makeStats.stats = new Stats();\n  return makeStats.stats;\n}\n\nlet reqId;\nexport const showFpsCounter = enabled => {\n  const stats = makeStats();\n  if (enabled && !reqId) {\n    document.body.appendChild(stats.dom);\n    stats.dom.style.right = 0;\n    stats.dom.style.left = null;\n    reqId = requestAnimationFrame(function loop() {\n      stats.update();\n      reqId = requestAnimationFrame(loop);\n    });\n  } else if (!enabled && reqId) {\n    cancelAnimationFrame(reqId);\n    reqId = undefined;\n    document.body.removeChild(stats.dom);\n  }\n};\n","import React, { Component } from \"react\";\nimport { GalleryItem } from \"./components/GalleryItem\";\nimport { GameOfLife } from \"./components/gallery/GameOfLife\";\nimport { ColorAutomata } from \"./components/gallery/ColorAutomata\";\n\nclass App extends Component {\n  render() {\n    const { shaders } = this.props;\n    return (\n      <ColorAutomata\n        name=\"Color Automata (WIP)\"\n        imgSrc=\"./frag/color-automata/color-automata.png\"\n        code={{\n          displayShader: shaders[\"frag/display.frag\"],\n          velocityShader: shaders[\"frag/color-automata/velocity.frag\"],\n          positionShader: shaders[\"frag/color-automata/position.frag\"],\n          invertVelocityShader:\n            shaders[\"frag/color-automata/invert-velocity.frag\"],\n          neighborAverageShader:\n            shaders[\"frag/color-automata/neighbor-average.frag\"],\n          separationShader: shaders[\"frag/color-automata/separation.frag\"]\n        }}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      />\n    );\n    // return (\n    //   <div>\n    //     <GalleryItem\n    //       name=\"256 colors\"\n    //       imgSrc=\"./frag/256-colors.png\"\n    //       code={{ fragmentShader: shaders[\"frag/256-colors.frag\"] }}\n    //     />\n    //     <GalleryItem\n    //       name=\"Glider gun\"\n    //       imgSrc=\"./frag/game-of-life/glider-gun.png\"\n    //       code={{\n    //         displayShader: shaders[\"frag/display.frag\"],\n    //         stepShader: shaders[\"frag/game-of-life/game-of-life.frag\"]\n    //       }}\n    //       preview={props => <GameOfLife {...props} />}\n    //       full={() => null}\n    //     />\n    //     <GalleryItem\n    //       name=\"Color Automata (WIP)\"\n    //       imgSrc=\"./frag/color-automata/color-automata.png\"\n    //       code={{\n    //         displayShader: shaders[\"frag/display.frag\"],\n    //         velocityShader: shaders[\"frag/color-automata/velocity.frag\"],\n    //         positionShader: shaders[\"frag/color-automata/position.frag\"],\n    //         invertVelocityShader:\n    //           shaders[\"frag/color-automata/invert-velocity.frag\"],\n    //         neighborAverageShader:\n    //           shaders[\"frag/color-automata/neighbor-average.frag\"],\n    //         separationShader: shaders[\"frag/color-automata/separation.frag\"]\n    //       }}\n    //       preview={props => <ColorAutomata {...props} />}\n    //       full={props => (\n    //         <ColorAutomata {...props} width=\"2048\" height=\"2048\" />\n    //       )}\n    //     />\n    //   </div>\n  }\n}\n\nexport default App;\n","const automata = [\"frag/color-automata/\"];\nconst shaderVariants = [\n  \"velocity\",\n  \"position\",\n  \"invert-velocity\",\n  \"neighbor-average\",\n  \"separation\",\n  \"utils\"\n];\nconst automataShaders = automata\n  .map(path => shaderVariants.map(variant => `${path}${variant}.frag`))\n  .reduce((acc, shaders) => acc.concat(shaders), []);\n\nconst promises = [\n  \"frag/256-colors.frag\",\n  \"frag/display.frag\",\n  \"frag/game-of-life/game-of-life.frag\"\n]\n  .concat(automataShaders)\n  .map(frag =>\n    fetch(frag)\n      .then(response => response.text())\n      .then(responseText => ({ [frag]: responseText }))\n  );\n\nexport const loadShaders = function loadShaders() {\n  return Promise.all(promises)\n    .then(responses => Object.assign({}, ...responses))\n    .then(shaders => {\n      const utils = shaders[\"frag/color-automata/utils.frag\"];\n      Object.keys(shaders).forEach(name => {\n        shaders[name] = shaders[name].replace(\"// include utils.frag\", utils);\n      });\n      return shaders;\n    });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport { showFpsCounter } from \"./stats\";\nimport { loadShaders } from \"./loader\";\n\nshowFpsCounter(true);\n\nloadShaders().then(shaders => {\n  console.log(shaders);\n  ReactDOM.render(<App shaders={shaders} />, document.getElementById(\"root\"));\n});\n"],"sourceRoot":""}